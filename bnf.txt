(ascii 32-126)
<ALL_CHARACTERS> ::= SPACE | ! | " | # | $ | % | & | ' | ( | ) | * | + | , | - | . | / | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 |
                     9 | : | ; | < | = | > | ? | @ | A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R |
                     S | T | U | V | W | X | Y | Z | [ | \ | ] | ^ | _ | ` | a | b | c | d | e | f | g | h | i | j | k | l |
                     m | n | o | p | q | r | s | t | u | v | w | x | y | z | { | | | } | ~

CHARACTERS:

<LETTER> ::= A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z |
             a | b | c | d | e | f | g | h | i | j | k | l | m | n | o | p | q | r | s | t | u | v | w | x | y | z

<DIGIT> ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9

<CHARACTER> ::= <LETTER> | <DIGIT> | SPACE | ! | " | # | $ | % | & | ' | ( | ) | * | + | , | - | . | / | : | ; | < | = | > |
                 ? | @ | [ | \ | ] | ^ | _ | ` | { | | | } | ~

<HEX_DIGIT> ::= <DIGIT> | A | B | C | D | E | F | a | b | c | d | e | f

<ESCAPED_CHARACTER> ::= \n | \\ | \' | \" | \x <HEX_DIGIT> | \x <HEX_DIGIT> <HEX_DIGIT>


TOKENS:

<L_PAREN> ::= (

<R_PAREN> ::= )

<L_BRACKET> ::= [

<R_BRACKET> ::= ]

<L_BRACE> ::= {

<R_BRACE> ::= }

<SINGLE_QUOTE> ::= '

<DOUBLE_QUOTE> ::= "

<SEMICOLON> ::= ;

<COMMA> ::= ,

<ASSIGNMENT_OPERATOR> ::= =

<PLUS> ::= +

<MINUS> ::= -

<ASTERISK> ::= *

<DIVIDE> ::= /

<MODULO> ::= %

<CARET> ::= ^

<LT> ::= <

<GT> ::= >

<LT_EQUAL> ::= <=

<GT_EQUAL> ::= >=

<BOOLEAN_AND> ::= &&

<BOOLEAN_OR> ::= ||

<BOOLEAN_NOT> ::= !

<BOOLEAN_EQUAL> ::= ==

<BOOLEAN_NOT_EQUAL> ::= !=

<BOOLEAN_TRUE> ::= TRUE

<BOOLEAN_FALSE> ::= FALSE

<STRING> ::= <CHARACTER> | <ESCAPE_CHARACTER> | <CHARACTER> <STRING> | <ESCAPE_CHARACTER> <STRING>

<DOUBLE_QUOTED_STRING> ::= <DOUBLE_QUOTE> <STRING> <DOUBLE_QUOTE>

<WHOLE_NUMBER> ::= <DIGIT> | <DIGIT> <WHOLE_NUMBER>

<NEGATIVE_NUMBER> ::= <MINUS> <WHOLE_NUMBER>

<LETTER_UNDERSCORE> ::= <LETTER> | _

<LETTER_DIGIT_UNDERSCORE> ::= <LETTER> | <DIGIT> | _

<IDENTIFIER_TAIL> ::= <LETTER_DIGIT_UNDERSCORE> | <LETTER_DIGIT_UNDERSCORE> <IDENTIFIER_TAIL>

<IDENTIFIER> ::= <LETTER_UNDERSCORE> | <LETTER_UNDERSCORE> <IDENTIFIER_TAIL>


SYMBOLS:

<SIMPLE_IDENTIFIER_ARRAY> ::= <IDENTIFIER> <L_BRACKET> <WHOLE_NUMBER> <R_BRACKET>

<IDENTIFIER_ARRAY> ::= <IDENTIFIER> <L_BRACKET> <NUMERICAL_EXPRESSION> <R_BRACKET>

<SIMPLE_IDENTIFIER_AND_ARRAY_LIST> ::= <IDENTIFIER> | <SIMPLE_IDENTIFIER_ARRAY> | <IDENTIFIER> <COMMA> <SIMPLE_IDENTIFIER_AND_ARRAY_LIST> |
                                       <SIMPLE_IDENTIFIER_ARRAY> <COMMA> <SIMPLE_IDENTIFIER_AND_ARRAY_LIST>

<IDENTIFIER_AND_ARRAY_LIST> ::= <IDENTIFIER> | <IDENTIFIER_ARRAY> | <IDENTIFIER> <COMMA> <IDENTIFIER_AND_ARRAY_LIST> |
                                <IDENTIFIER_ARRAY> <COMMA> <IDENTIFIER_AND_ARRAY_LIST>

<DATATYPE_SPECIFIER> ::= int | bool | char

<NUMERICAL_OPERAND> ::= <WHOLE_NUMBER> | <NEGATIVE_NUMBER> |
                        <IDENTIFIER> | <IDENTIFIER_ARRAY> |
                        <GETCHAR_FUNCTION> | <USER_DEFINED_FUNCTION> |
                        <SINGLE_QUOTE> <CHARACTER> <SINGLE_QUOTE> | <SINGLE_QUOTE> <ESCAPED_CHARACTER> <SINGLE_QUOTE>

<NUMERICAL_OPERATOR> ::= <PLUS> | <MINUS> | <ASTERISK> | <DIVIDE> | <MODULO> | <CARET>

<NUMERICAL_EXPRESSION> ::= <NUMERICAL_OPERAND> |
                           <NUMERICAL_OPERAND> <NUMERICAL_OPERATOR> <NUMERICAL_EXPRESSION> |
                           <L_PAREN> <NUMERICAL_EXPRESSION> <R_PAREN> <NUMERICAL_OPERATOR> <NUMERICAL_EXPRESSION> |
                           <L_PAREN> <NUMERICAL_EXPRESSION> <R_PAREN>

<BOOLEAN_OPERAND> ::= <IDENTIFIER> | <USER_DEFINED_FUNCTION> |
                      <BOOLEAN_TRUE> | <BOOLEAN_FALSE> | <BOOLEAN_NOT> <BOOLEAN_OPERAND>

<BOOLEAN_OPERATOR> ::= <BOOLEAN_AND> | <BOOLEAN_OR

<RELATIONAL_EXPRESSION> ::= <LT> | <LT_EQUAL> | <GT> | <GT_EQUAL> | <BOOLEAN_EQUAL> | <BOOLEAN_NOT_EQUAL>

<BOOLEAN_EXPRESSION> ::= <BOOLEAN_OPERAND> |
                         <BOOLEAN_OPERAND> <BOOLEAN_OPERATOR> <BOOLEAN_EXPRESSION> |
                         <L_PAREN> <BOOLEAN_EXPRESSION> <R_PAREN> <BOOLEAN_OPERATOR> <BOOLEAN_EXPRESSION> |
                         <L_PAREN> <BOOLEAN_EXPRESSION> <R_PAREN> |
                         <NUMERICAL_EXPRESSION> <RELATIONAL_EXPRESSION> <NUMERICAL_EXPRESSION> <BOOLEAN_OPERATOR> <BOOLEAN_EXPRESSION> |
                         <NUMERICAL_EXPRESSION> <RELATIONAL_EXPRESSION> <NUMERICAL_EXPRESSION>

<EXPRESSION_LIST> ::= <NUMERICAL_EXPRESSION> | <BOOLEAN_EXPRESSION> |
                      <NUMERICAL_EXPRESSION> <COMMA> <EXPRESSION_LIST> | <BOOLEAN_EXPRESSION> <COMMA> <EXPRESSION_LIST>

<GETCHAR_FUNCTION> ::= getchar <L_PAREN> <R_PAREN>

<USER_DEFINED_FUNCTION> ::= -> <IDENTIFIER> <L_PAREN> <EXPRESSION_LIST> <R_PAREN> |
                            -> <IDENTIFIER> <L_PAREN> <R_PAREN
                            xx <IDENTIFIER> <L_PAREN> <IDENTIFIER_AND_ARRAY_LIST> <R_PAREN> |
                            xx <IDENTIFIER> <L_PAREN> <NUMERICAL_EXPRESSION> <R_PAREN> |
                            xx <IDENTIFIER> <L_PAREN> <BOOLEAN_EXPRESSION> <R_PAREN>

<INITIALIZATION_EXPRESSION> ::= <IDENTIFIER> <ASSIGNMENT_OPERATOR> <NUMERICAL_EXPRESSION> |
                                <IDENTIFIER> <ASSIGNMENT_OPERATOR> <BOOLEAN_EXPRESSION> |
                                <IDENTIFIER> <ASSIGNMENT_OPERATOR> <DOUBLE_QUOTED_STRING> |
                                <IDENTIFIER_ARRAY> <ASSIGNMENT_OPERATOR> <NUMERICAL_EXPRESSION> |
                                <IDENTIFIER_ARRAY> <ASSIGNMENT_OPERATOR> <BOOLEAN_EXPRESSION>
                                xx <IDENTIFIER_ARRAY> <ASSIGNMENT_OPERATOR> <DOUBLE_QUOTED_STRING>


<DECLARATION_STATEMENT> ::= xx <DATATYPE_SPECIFIER> <IDENTIFIER> <SEMICOLON> |
                            -> <DATATYPE_SPECIFIER> <SIMPLE_IDENTIFIER_AND_ARRAY_LIST> <SEMICOLON>

<ASSIGNMENT_STATEMENT> ::= <INITIALIZATION_EXPRESSION> <SEMICOLON>

<SELECTION_STATEMENT> ::= if <L_PAREN> <BOOLEAN_EXPRESSION> <R_PAREN> <STATEMENT> |
                          if <L_PAREN> <BOOLEAN_EXPRESSION> <R_PAREN> <STATEMENT> else <STATEMENT> |
                          if <L_PAREN> <BOOLEAN_EXPRESSION> <R_PAREN> <STATEMENT> else <BLOCK_STATEMENT> |
                          if <L_PAREN> <BOOLEAN_EXPRESSION> <R_PAREN> <BLOCK_STATEMENT> |
                          if <L_PAREN> <BOOLEAN_EXPRESSION> <R_PAREN> <BLOCK_STATEMENT> else <STATEMENT> |
                          if <L_PAREN> <BOOLEAN_EXPRESSION> <R_PAREN> <BLOCK_STATEMENT> else <BLOCK_STATEMENT>

<ITERATION_STATEMENT> ::= for <L_PAREN> <INITIALIZATION_EXPRESSION> <SEMICOLON> <BOOLEAN_EXPRESSION> <SEMICOLON> <INITIALIZATION_EXPRESSION> <R_PAREN> <STATEMENT> |
                          for <L_PAREN> <INITIALIZATION_EXPRESSION> <SEMICOLON> <BOOLEAN_EXPRESSION> <SEMICOLON> <INITIALIZATION_EXPRESSION> <R_PAREN> <BLOCK_STATEMENT> |
                          while <L_PAREN> <BOOLEAN_EXPRESSION> <R_PAREN> <STATEMENT> |
                          while <L_PAREN> <BOOLEAN_EXPRESSION> <R_PAREN> <BLOCK_STATEMENT>

<PRINT_STATEMENT> ::= print <L_PAREN> <DOUBLE_QUOTED_STRING> <R_PAREN> <SEMICOLON> |
                      -> print <L_PAREN> <DOUBLE_QUOTED_STRING> <COMMA> <EXPRESSION_LIST> <R_PAREN> <SEMICOLON>
                      xx print <L_PAREN> <DOUBLE_QUOTED_STRING> <COMMA> <IDENTIFIER_AND_ARRAY_LIST> <R_PAREN> <SEMICOLON>

<RETURN_STATEMENT> ::= return <NUMERICAL_EXPRESSION> <SEMICOLON> |
                       return <BOOLEAN_EXPRESSION> <SEMICOLON> |
                       return <DOUBLE_QUOTED_STRING> <SEMICOLON> |
                       return <SEMICOLON>

<STATEMENT> ::= <DECLARATION_STATEMENT> | <ASSIGNMENT_STATEMENT> |
                <SELECTION_STATEMENT> | <ITERATION_STATEMENT> |
                <PRINT_STATEMENT> | <USER_DEFINED_FUNCTION> <SEMICOLON> |
                <RETURN_STATEMENT>

<COMPOUND_STATEMENT> ::= <STATEMENT> | <STATEMENT> <COMPOUND_STATEMENT>

<BLOCK_STATEMENT> ::= <L_BRACE> <COMPOUND_STATEMENT> <R_BRACE> | <L_BRACE> <R_BRACE>

<PARAMETER_LIST> ::= <DATATYPE_SPECIFIER> <IDENTIFIER> | <DATATYPE_SPECIFIER> <IDENTIFIER> <COMMA> <PARAMETER_LIST>

<FUNCTION_DECLARATION> ::= <DATATYPE_SPECIFIER> <IDENTIFIER> <L_PAREN> <PARAMETER_LIST> <R_PAREN> <BLOCK_STATEMENT> |
                           <DATATYPE_SPECIFIER> <IDENTIFIER> <L_PAREN> <R_PAREN> <BLOCK_STATEMENT>

<NON_RETURNING_FUNCTION_DECLARATION> ::= void <IDENTIFIER> <L_PAREN> <PARAMETER_LIST> <R_PAREN> <BLOCK_STATEMENT> |
                                         void <IDENTIFIER> <L_PAREN> <R_PAREN> <BLOCK_STATEMENT>

<MAIN_DECLARATION> ::= void main <L_PAREN> <R_PAREN> <BLOCK_STATEMENT>

<PROGRAM> ::= <MAIN_DECLARATION> | <FUNCTION_DECLARATION> <PROGRAM> | <NON_RETURNING_FUNCTION_DECLARATION> <PROGRAM> |
              <DECLARATION_STATEMENT> <PROGRAM>